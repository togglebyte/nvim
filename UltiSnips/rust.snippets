snippet anabase
use anathema::prelude::*;
use anathema::component::*;

fn main() {
    let mut doc = Document::new("@index");

    let mut backend = TuiBackend::builder()
        .enable_alt_screen()
        .enable_raw_mode()
        .hide_cursor()
        .finish()
        .unwrap();

    let mut runtime = Runtime::builder(doc, backend);
	runtime.register_component("index", "index.aml", (), ());
    runtime.finish().unwrap().run();
}
endsnippet

snippet cmt
// -----------------------------------------------------------------------------
//   - $1-
// -----------------------------------------------------------------------------$0
endsnippet

snippet struct "Create a struct"
struct $1 {
}

impl $1 {
    fn new() -> Self {
	    Self {
		}
	}
}
endsnippet

snippet testmod 
#[cfg(test)]
mod test {
	use super::*;

	$1
}
endsnippet

snippet test
#[test]
fn $1() {
	assert_eq!(expected, actual);
}
endsnippet

snippet impit "implement iterator for..."
impl Iterator for $1 {
	type Item = $0;

	fn next(&mut self) -> Option<Self::Item> {
		None
	}
}
endsnippet

snippet impfrom "implement From for..."
impl From<$1> for $0 {
	fn from(e: $1) -> Self {
	}
}
endsnippet

snippet default "default macro"
impl Default for ${0:${VISUAL}} {
	fn default() -> Self {
		Self {
		}
	}
}
endsnippet


snippet main "main function"
fn main() {
${0:${VISUAL}}
}
endsnippet


snippet new "new function"
pub fn new() -> Self {
	Self {
		${0:${VISUAL}}
	}
}
endsnippet


snippet benchbase
#![feature(test)]
extern crate test;
use test::bench::{Bencher, black_box};

#[bench]
fn $1(b: &mut Bencher) {
    b.iter(|| {
    });
}
endsnippet

snippet bench
#[bench]
fn $1(b: &mut Bencher) {
    b.iter(|| {
    });
}
endsnippet

snippet address "address boilerplate"
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Address {
	$0
}

impl ToAddress for Address {
	fn from_bytes(bytes: &[u8]) -> Option<Address> {
		match bytes {
			_ => None
		}
	}

	fn to_string(&self) -> String {
		format!("{:?}", self)
	}
}
endsnippet

snippet pl "eprinln"
eprintln!("$1");
endsnippet

snippet comp "component"
impl Component for $1 {
	type State = ();
	type Message = ();
}
endsnippet
